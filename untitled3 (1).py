# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IvMGB9Nz1fM777_WbFDUkv86qYCUaYsT
"""

#bisseção
#raízes reais
#representação gráfica

import numpy as np
import matplotlib.pyplot as plt

f=lambda x: x**3-9*x+5

a, b = 0, 2
tol = 1e-6
max = 6

x=np.linspace(-5,5,500)
y=f(x)

raízes=roots = np.roots([1, 0, -9, 5])
raízes_reais = roots[np.isreal(roots)].real

plt.figure(figsize=(9,6))
plt.plot(x, y, linewidth=1.8, label=r'$f(x)=x^3-9x+5$')
plt.axhline(0, linestyle='--', linewidth=1, label='eixo x (y=0)')

for r in raízes_reais:
    plt.scatter(r, 0, s=80, marker='o')
    plt.annotate(f'{r:.6f}', xy=(r, 0), xytext=(8, -10),
                 textcoords='offset points', fontsize=10)

for i in range(max):
    c = (a + b) / 2
    plt.axvline(a, color='red', linestyle=':', alpha=0.6)
    plt.axvline(b, color='green', linestyle=':', alpha=0.6)
    plt.axvline(c, color='orange', linestyle='--', alpha=0.8)

    plt.scatter([a, b, c], [f(a), f(b), f(c)], color=['red','green','orange'])
    plt.text(c, f(c), f"c{i+1}", fontsize=9, color='orange', ha='left', va='bottom')

    if f(a)*f(c) < 0:
        b = c
    else:
        a = c

plt.title('Gráfico de $f(x)=x^3-9x+5$')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.grid(True, which='both', linestyle=':', linewidth=0.6)
plt.legend()
plt.tight_layout()
plt.show()

#Vamos então representar a bisseção:

#secante
#raízes reais
#representação gráfica

import numpy as np
import matplotlib.pyplot as plt

f=lambda x: x**3 - 9*x + 5

x=np.linspace(-5, 5, 800)
y=f(x)

x0, x1=0, 2
max_iterations=6
tol=1e-6

plt.figure(figsize=(9,6))
plt.plot(x, y, 'b', linewidth=1.8, label=r'$f(x)=x^3-9x+5$')
plt.axhline(0, color='black', linestyle='--', linewidth=1)

for i in range(max_iterations):
    f0,f1=f(x0),f(x1)
    m=(f1 - f0)/(x1 - x0)

    x_new=x1 - f1/m

    xs=np.linspace(np.min([x0, x1])-0.5, np.max([x0, x1])+0.5, 50)
    ys=f1 + m * (xs - x1)
    plt.plot(xs, ys, 'orange', linestyle='--', alpha=0.7)


    plt.scatter([x0, x1], [f0, f1], color=['red','green'])
    plt.scatter(x_new, 0, color='purple', marker='x', s=80)
    plt.text(x_new, 0, f"x{i+2}", color='purple', fontsize=9, va='bottom')

    if abs(f1) < tol:
        break
    x0, x1 = x1, x_new

plt.title('Método da Secante – aproximações sucessivas')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.grid(True, linestyle=':')
plt.show()

#Método de Newton-Raphson
#raízes reais
#representação gráfica


import numpy as np
import matplotlib.pyplot as plt

f=lambda x: x**3 - 9*x + 5
df=lambda x: 3*x**2 - 9

x=np.linspace(-5, 5, 800)
y=f(x)

x0=1.5
max=6
tol=1e-6

plt.figure(figsize=(9,6))
plt.plot(x, y, 'b', linewidth=1.8, label=r'$f(x)=x^3-9x+5$')
plt.axhline(0, color='black', linestyle='--', linewidth=1)

for i in range(max):
    f0=f(x0)
    df0=df(x0)

    x1=x0 - f0 / df0

    xs=np.linspace(x0 - 1.5, x0 + 1.5, 50)
    ys=f0 + df0 * (xs - x0)
    plt.plot(xs, ys, 'orange', linestyle='--', alpha=0.8)

    plt.scatter(x0, f0, color='red')
    plt.scatter(x1, 0, color='purple', marker='x', s=80)
    plt.text(x1, 0, f"x{i+1}", color='purple', fontsize=9, va='bottom')

    if abs(f0) < tol:
        break
    x0 = x1

plt.title('Método de Newton-Raphson – Tangentes sucessivas')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.grid(True, linestyle=':', alpha=0.5)
plt.tight_layout()
plt.show()

